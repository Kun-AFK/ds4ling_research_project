# install.packages("caret")
library(caret)
set.seed(2025)
train_ctrl <- trainControl(method = "cv", number = 10)
# OLS CV
ols_cv <- train(
quality ~ .,
data      = data_wine_raw,
method    = "lm",
trControl = train_ctrl
)
# Lasso CV
lasso_cv <- train(
quality ~ .,
data      = data_wine_raw,
method    = "glmnet",
trControl = train_ctrl,
tuneGrid  = expand.grid(alpha = 1, lambda = cv_lasso$lambda)
)
# Output model performance
ols_cv
lasso_cv
install.packages("rstanarm")
# 9.1 拟合模型（默认：Gaussian family）
model_bayes <- stan_glm(
quality ~ .,
data            = data_wine_raw,
family          = gaussian(),
prior           = normal(0, 1),        # 固定效应先验
prior_intercept = normal(0, 5),        # 截距先验
chains          = 4,
cores           = parallel::detectCores(),
iter            = 2000,
seed            = 2025
)
)
# ─────────────────────────────────────────────────────────────────────────────
# 9. 贝叶斯回归：rstanarm 包
# ─────────────────────────────────────────────────────────────────────────────
# install.packages("rstanarm", repos = "https://cloud.r-project.org/")
library(rstanarm)
# 9.1 拟合模型（默认：Gaussian family）
model_bayes <- stan_glm(
quality ~ .,
data            = data_wine_raw,
family          = gaussian(),
prior           = normal(0, 1),        # 固定效应先验
prior_intercept = normal(0, 5),        # 截距先验
chains          = 4,
cores           = parallel::detectCores(),
iter            = 2000,
seed            = 2025
)
print(model_bayes, digits = 2)
# 9.2 后验区间
posterior_interval(model_bayes, prob = 0.95)
# 9.3 后验预测检验（Posterior Predictive Check）
pp_check(model_bayes)        # KDE 对比
library(tidyr)
# Plot boxplots for core variables
ggplot(data_core, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "lightblue", outlier.color = "darkred") +
labs(
title = "Distribution of Core Variables (Boxplots)",
x     = NULL,
y     = "Value"
) +
theme_minimal(base_size = 14)
# Select the core variables and pivot to long format
data_core <- data_wine_raw %>%
select(fixed.acidity, volatile.acidity, alcohol, quality) %>%
pivot_longer(
cols = everything(),
names_to  = "Variable",
values_to = "Value"
)
# Plot boxplots for core variables
ggplot(data_core, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "lightblue", outlier.color = "darkred") +
labs(
title = "Distribution of Core Variables (Boxplots)",
x     = NULL,
y     = "Value"
) +
theme_minimal(base_size = 14)
knitr::kable(head(data_wine_raw))
wine_data_tidy <- data_wine_raw %>%
rename(
FixAcid = fixed.acidity,
VolAcid = volatile.acidity,
CitAcid = citric.acid,
Sugar   = residual.sugar,
Chlor   = chlorides,
FSO2    = free.sulfur.dioxide,
TSO2    = total.sulfur.dioxide,
Dens    = density,
pH      = pH,
Sulph   = sulphates,
Alc     = alcohol,
Qual    = quality
)
data_wine_tidy <- data_wine_raw %>%
rename(
FixAcid = fixed.acidity,
VolAcid = volatile.acidity,
CitAcid = citric.acid,
Sugar   = residual.sugar,
Chlor   = chlorides,
FSO2    = free.sulfur.dioxide,
TSO2    = total.sulfur.dioxide,
Dens    = density,
pH      = pH,
Sulph   = sulphates,
Alc     = alcohol,
Qual    = quality
)
# 9.1 Fit the model (default: Gaussian family)
model_bayes <- stan_glm(
Qual ~ .,
data            = data_wine_tidy,
family          = gaussian(),
prior           = normal(0, 1),        # Prior for fixed effects
prior_intercept = normal(0, 5),        # Prior for intercept
chains          = 4,
cores           = parallel::detectCores(),
iter            = 2000,
seed            = 2025
)
# Loading necessary library
library(tidyverse)
library(here)
library(dplyr)
library(tidyr)
library(ds4ling)
library(lme4)
library(lmerTest)
library(GGally)       # ggpairs()
library(corrplot)     # corrplot()
library(ggcorrplot)   # ggcorrplot()
# Read the raw data
data_wine_raw <- read.csv(
here("data_raw", "winequality-red.csv"),
header = TRUE,
sep = ";",
stringsAsFactors = FALSE
)
# Test if there has any NA in data_wine_raw
anyNA(data_wine_raw)
colSums(is.na(data_wine_raw))
# View data structure
glimpse(data_wine_raw)
summary(data_wine_raw)
data_wine_tidy <- data_wine_raw %>%
rename(
FixAcid = fixed.acidity,
VolAcid = volatile.acidity,
CitAcid = citric.acid,
Sugar   = residual.sugar,
Chlor   = chlorides,
FSO2    = free.sulfur.dioxide,
TSO2    = total.sulfur.dioxide,
Dens    = density,
pH      = pH,
Sulph   = sulphates,
Alc     = alcohol,
Qual    = quality
)
# 3.3 dplyr summary: mean, median, first/third quartile
data_wine_tidy |>
summarise(across(
.cols = everything(),
.fns = list(
mean   = ~ mean(.x, na.rm = TRUE),
median = ~ median(.x, na.rm = TRUE),
Q1     = ~ quantile(.x, 0.25, na.rm = TRUE),
Q3     = ~ quantile(.x, 0.75, na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)) |>
pivot_longer(everything(),
names_to  = c("variable", "stat"),
names_sep = "_",
values_to = "value") %>%
arrange(variable, stat)
# Select the core variables and pivot to long format
data_core <- data_wine_tidy |>
select(FixAcid, VolAcid, Alc, Qual) |>
pivot_longer(
cols = everything(),
names_to  = "Variable",
values_to = "Value"
)
# Plot boxplots for core variables
ggplot(data_core, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "lightblue", outlier.color = "darkred") +
labs(
title = "Distribution of Core Variables (Boxplots)",
x     = NULL,
y     = "Value"
) +
theme_minimal(base_size = 14)
# 4. Variable correlation heatmap
# 4.1 Calculate correlation matrix
corr_mat <- cor(data_wine_tidy, use = "pairwise.complete.obs")
# 2. Generate a gradient color from blue to white to red
my_col <- colorRampPalette(c("#2166AC", "white", "#B2182B"))(200)
# 3. Plot
corrplot(
corr_mat,
method      = "color",      # Fill squares with color
col         = my_col,       # Custom color scheme
type        = "upper",      # Only plot upper triangle
order       = "hclust",     # Sort by hierarchical clustering
tl.col      = "black",      # Variable label color
tl.srt      = 45,           # Rotate labels 45°
tl.cex      = 0.8,          # Label font size
addCoef.col = "black",      # Add coefficients in squares
number.cex  = 0.7,          # Coefficient font size
diag        = FALSE,        # Do not plot diagonal
mar         = c(0,0,1,0)    # Leave space for title
)
title("Wine Quality Variable correlation heatmap", line = 0.5, cex.main = 1.2)
# 4.3 ggcorrplot package example (more visually appealing)
ggcorrplot(
corr_mat,
hc.order = TRUE,
lab      = TRUE,          # Write coefficients in squares
lab_size = 3,
outline.col = "white"
)
# 5. Pairwise scatterplot matrix (Pairwise scatterplots + correlations + density plots)
# 5.1 Simplest: GGally::ggpairs
GGally::ggpairs(
data_wine_tidy,
lower = list(continuous = wrap("points", alpha = 0.3, size = 0.5)),
upper = list(continuous = wrap("cor", size = 3)),
diag  = list(continuous = wrap("densityDiag"))
)
# 6. Ordinary Least Squares Regression (OLS)
model_ols <- lm(Qual ~ ., data = data_wine_tidy)
summary(model_ols)
# Regression diagnostic plots (residuals, Q-Q, leverage points, etc.)
par(mfrow = c(2, 2))
plot(model_ols)
par(mfrow = c(1, 1))
diagnosis(model_ols)
# 7. Lasso regression: glmnet package
# ─────────────────────────────────────────────────────────────────────────────
library(glmnet)
# Prepare matrices: x (independent variables), y (dependent variable)
x <- model.matrix(Qual ~ ., data = data_wine_tidy)[, -1]
y <- data_wine_tidy$Qual
# 7.1 10-fold cross-validation to find optimal λ
set.seed(2025)
cv_lasso <- cv.glmnet(x, y, alpha = 1, family = "gaussian", standardize = TRUE, nfolds = 10)
plot(cv_lasso)                # Error curve
best_lambda <- cv_lasso$lambda.min
best_lambda
# 7.2 Extract coefficients
lasso_coef <- coef(cv_lasso, s = "lambda.min")
print(lasso_coef)             # Non-zero coefficients are variables selected by Lasso
# ─────────────────────────────────────────────────────────────────────────────
# 8. Model performance comparison (RMSE under cross-validation)
# ─────────────────────────────────────────────────────────────────────────────
library(caret)
set.seed(2025)
train_ctrl <- trainControl(method = "cv", number = 10)
# OLS CV
ols_cv <- train(
Qual ~ .,
data      = data_wine_tidy,
method    = "lm",
trControl = train_ctrl
)
# Lasso CV
lasso_cv <- train(
Qual ~ .,
data      = data_wine_tidy,
method    = "glmnet",
trControl = train_ctrl,
tuneGrid  = expand.grid(alpha = 1, lambda = cv_lasso$lambda)
)
# Output model performance
ols_cv
lasso_cv
# ─────────────────────────────────────────────────────────────────────────────
# 9. Bayesian regression: rstanarm package
# ─────────────────────────────────────────────────────────────────────────────
library(rstanarm)
# 9.1 Fit the model (default: Gaussian family)
model_bayes <- stan_glm(
Qual ~ .,
data            = data_wine_tidy,
family          = gaussian(),
prior           = normal(0, 1),        # Prior for fixed effects
prior_intercept = normal(0, 5),        # Prior for intercept
chains          = 4,
cores           = parallel::detectCores(),
iter            = 2000,
seed            = 2025
)
print(model_bayes, digits = 2)
# 9.2 Posterior intervals
posterior_interval(model_bayes, prob = 0.95)
# 9.3 Posterior predictive check
pp_check(model_bayes)        # KDE comparison
data_core <- data_wine_tidy |>
select(FixAcid, VolAcid, Alc, Qual) |>
pivot_longer(
cols = everything(),
names_to  = "Variable",
values_to = "Value"
)
# Plot boxplots for core variables
ggplot(data_core, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "lightblue", outlier.color = "darkred") +
labs(
title = "Distribution of Core Variables (Boxplots)",
x     = NULL,
y     = "Value"
) +
theme_minimal(base_size = 14)
corr_mat <- cor(data_wine_tidy, use = "pairwise.complete.obs")
# 2. Generate a gradient color from blue to white to red
my_col <- colorRampPalette(c("#2166AC", "white", "#B2182B"))(200)
# 3. Plot
corrplot(
corr_mat,
method      = "color",      # Fill squares with color
col         = my_col,       # Custom color scheme
type        = "upper",      # Only plot upper triangle
order       = "hclust",     # Sort by hierarchical clustering
tl.col      = "black",      # Variable label color
tl.srt      = 45,           # Rotate labels 45°
tl.cex      = 0.8,          # Label font size
addCoef.col = "black",      # Add coefficients in squares
number.cex  = 0.7,          # Coefficient font size
diag        = FALSE,        # Do not plot diagonal
mar         = c(0,0,1,0)    # Leave space for title
)
title("Wine Quality Variable correlation heatmap", line = 0.5, cex.main = 1.2)
# 4.3 ggcorrplot package example (more visually appealing)
ggcorrplot(
corr_mat,
hc.order = TRUE,
lab      = TRUE,          # Write coefficients in squares
lab_size = 3,
outline.col = "white"
)
# define the four core variables
vars <- c("Alc", "FixAcid", "VolAcid", "Qual")
# compute min, Q1, median, Q3, max
five_num <- sapply(data_wine_tidy[vars],
function(x) quantile(x, probs = c(0, .25, .5, .75, 1)))
# transpose and convert to a nice table
five_num_df <- as.data.frame(t(five_num))
colnames(five_num_df) <- c("Min", "Q1", "Median", "Q3", "Max")
# print with knitr::kable
kable(five_num_df,
caption = "Five‐Number Summaries for Core Variables",
digits = 2,
align = "c")
# Loading necessary library
library(tidyverse)
library(here)
library(dplyr)
library(tidyr)
library(ds4ling)
library(lme4)
library(lmerTest)
library(GGally)       # ggpairs()
library(corrplot)     # corrplot()
library(ggcorrplot)   # ggcorrplot()
library(glmnet)
library(caret)
library(rstanarm)
library(knitr)
# Read the raw data
data_wine_raw <- read.csv(
here("data_raw", "winequality-red.csv"),
header = TRUE,
sep = ";",
stringsAsFactors = FALSE
)
data_wine_tidy <- data_wine_raw |>
rename(
FixAcid = fixed.acidity,
VolAcid = volatile.acidity,
CitAcid = citric.acid,
Sugar   = residual.sugar,
Chlor   = chlorides,
FSO2    = free.sulfur.dioxide,
TSO2    = total.sulfur.dioxide,
Dens    = density,
pH      = pH,
Sulph   = sulphates,
Alc     = alcohol,
Qual    = quality
)
mini_table <- data_wine_tidy |>
select(FixAcid, VolAcid, Sugar, Chlor, Alc, Qual) |>
head(6)
kable(mini_table, caption = "data_wine_tidy (Part vars)", align="c")
# define the four core variables
vars <- c("Alc", "FixAcid", "VolAcid", "Qual")
# compute min, Q1, median, Q3, max
five_num <- sapply(data_wine_tidy[vars],
function(x) quantile(x, probs = c(0, .25, .5, .75, 1)))
# transpose and convert to a nice table
five_num_df <- as.data.frame(t(five_num))
colnames(five_num_df) <- c("Min", "Q1", "Median", "Q3", "Max")
# print with knitr::kable
kable(five_num_df,
caption = "Five‐Number Summaries for Core Variables",
digits = 2,
align = "c")
# define the four core variables
vars <- c("Alc", "FixAcid", "VolAcid", "Qual")
# compute min, Q1, median, Q3, max
five_num <- sapply(data_wine_tidy[vars],
function(x) quantile(x, probs = c(0, .25, .5, .75, 1)))
# transpose and convert to a nice table
five_num_df <- as.data.frame(t(five_num))
colnames(five_num_df) <- c("Min", "Q1", "Median", "Q3", "Max")
# print with knitr::kable
kable(five_num_df,
caption = "Five‐Number Summaries for Core Variables",
digits = 2,
align = "c")
ggplot(data_core, aes(x = Variable, y = Value)) +
geom_boxplot(fill = "lightblue", outlier.color = "darkred") +
labs(
title = "Distribution of Core Variables (Boxplots)",
x     = NULL,
y     = "Value"
) +
theme_minimal(base_size = 14)+
scale_fill_brewer(palette = "Pastel1") +
theme(legend.position = "none")
# Loading necessary library
library(tidyverse)
library(here)
library(dplyr)
library(tidyr)
library(ds4ling)
library(lme4)
library(lmerTest)
library(GGally)       # ggpairs()
library(corrplot)     # corrplot()
library(ggcorrplot)   # ggcorrplot()
# Read the raw data
data_wine_raw <- read.csv(
here("data_raw", "winequality-red.csv"),
header = TRUE,
sep = ";",
stringsAsFactors = FALSE
)
# Test if there has any NA in data_wine_raw
anyNA(data_wine_raw)
colSums(is.na(data_wine_raw))
# View data structure
glimpse(data_wine_raw)
summary(data_wine_raw)
data_wine_tidy <- data_wine_raw %>%
rename(
FixAcid = fixed.acidity,
VolAcid = volatile.acidity,
CitAcid = citric.acid,
Sugar   = residual.sugar,
Chlor   = chlorides,
FSO2    = free.sulfur.dioxide,
TSO2    = total.sulfur.dioxide,
Dens    = density,
pH      = pH,
Sulph   = sulphates,
Alc     = alcohol,
Qual    = quality
)
# 3.3 dplyr summary: mean, median, first/third quartile
data_wine_tidy |>
summarise(across(
.cols = everything(),
.fns = list(
mean   = ~ mean(.x, na.rm = TRUE),
median = ~ median(.x, na.rm = TRUE),
Q1     = ~ quantile(.x, 0.25, na.rm = TRUE),
Q3     = ~ quantile(.x, 0.75, na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)) |>
pivot_longer(everything(),
names_to  = c("variable", "stat"),
names_sep = "_",
values_to = "value") %>%
arrange(variable, stat)
# Select the core variables and pivot to long format
data_core <- data_wine_tidy |>
select(FixAcid, VolAcid, Alc, Qual) |>
pivot_longer(
cols = everything(),
names_to  = "Variable",
values_to = "Value"
)
# 4.1 Calculate correlation matrix
corr_mat <- cor(data_wine_tidy, use = "pairwise.complete.obs")
# 2. Generate a gradient color from blue to white to red
my_col <- colorRampPalette(c("#2166AC", "white", "#B2182B"))(200)
# 6. Ordinary Least Squares Regression (OLS)
model_ols <- lm(Qual ~ ., data = data_wine_tidy)
summary(model_ols)
model_ols <- lm(Qual ~ ., data = data_wine_tidy)
knitr::kable(summary(model_ols)$coefficients)
